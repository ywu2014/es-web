<?xml version="1.0" encoding="UTF-8"?>

<!-- name:指定当前CacheManager的名称 -->
<!-- maxBytesLocalHeap:在CacheManager级别指定能够使用的堆内存的最大容量 ,是其内部所有Cache一起所能使用的内存的最大量-->
<!-- updateCheck:是否检查更新 -->
<!-- dynamicConfig:是否可以动态的更新配置 -->
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
   xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd"
   name="cacheManager"
   maxBytesLocalHeap="30M"
   updateCheck="false"
   dynamicConfig="true">
   
   	<!-- 指定磁盘存储的路径的,path表示磁盘存储的路径 -->
   	<!-- 如果不希望Ehcache创建磁盘存储的路径,则可以不定义diskStore元素。在没有定义diskStore,但有cache需要使用磁盘存储时会默认使用java.io.tmpdir作为磁盘存储的路径 -->
   	<!-- diskStore元素的path属性使用如下值时将自动替换为实际对应的值: -->
   	<!-- java.io.tmpdir:默认的临时文件存放路径 -->
   	<!-- user.home:用户的主目录 -->
   	<!-- user.dir:用户的当前工作目录,即当前程序所对应的工作路径 -->
   	<!-- 其它通过命令行指定的系统属性,如“java –DdiskStore.path=D:\\abc …… -->
   	<diskStore path="java.io.tmpdir"/>
   	
   	<!-- cache manager监听器 -->
   	<cacheManagerEventListenerFactory class="com.jiangnan.es.cache.ehcache.listener.factory.DefaultCacheManagerEventListenerFactory"/>
    
    <!-- 用来指定cache的默认配置的,其可以指定的信息大体上跟cache元素是一样的。这些配置只会对在程序中通过CacheManager的addCache(String cacheName)方法添加的Cache起作用 -->
	<defaultCache copyOnRead="false" copyOnWrite="false"/>
	
	<!-- name:指定cache的名称 -->
	<!-- maxEntriesLocalDisk:指定允许在硬盘上存放元素的最大数量,0表示不限制 -->
	<!-- maxEntriesLocalHeap:定允许在内存中存放元素的最大数量,0表示不限制 ,与maxBytesLocalHeap不能同时使用-->
	<!-- maxEntriesInCache:指定缓存中允许存放元素的最大数量,这个属性也可以在运行期动态修改,但是这个属性只对Terracotta分布式缓存有用 -->
	<!-- maxBytesLocalDisk:指定当前缓存能够使用的硬盘的最大字节数,其值可以是数字加单位,单位可以是K、M或者G,不区分大小写,如：30G。当在CacheManager级别指定了该属性后,Cache级别也可以用百分比来表示,如：60%，表示最多使用CacheManager级别指定硬盘容量的60%,该属性也可以在运行期指定。当指定了该属性后会隐式的使当前Cache的overflowToDisk为true -->
	<!-- maxBytesLocalHeap:指定当前缓存能够使用的堆内存的最大字节数,同maxBytesLocalDisk -->
	<!-- maxBytesLocalOffHeap:指定当前Cache允许使用的非堆内存的最大字节数,当指定了该属性后,会使当前Cache的overflowToOffHeap的值变为true,如果我们需要关闭overflowToOffHeap,那么我们需要显示的指定overflowToOffHeap的值为false -->
	<!-- overflowToDisk:当内存里面的缓存已经达到预设的上限时是否允许将按驱除策略驱除的元素保存在硬盘上,默认是LRU（最近最少使用）。当指定为false的时候表示缓存信息不会保存到磁盘上，只会保存在内存中。该属性现在已经废弃，推荐使用cache元素的子元素persistence来代替 -->
	<!-- diskSpoolBufferSizeMB:当往磁盘上写入缓存信息时缓冲区的大小,单位是MB,默认是30 -->
	<!-- overflowToOffHeap:表示是否允许Cache使用非堆内存进行存储,非堆内存是不受Java GC影响的,该属性只对企业版Ehcache有用 -->
	<!-- copyOnRead:当指定该属性为true时,我们在从Cache中读数据时取到的是Cache中对应元素的一个copy副本,而不是对应的一个引用。默认为false -->
	<!-- copyOnWrite:当指定该属性为true时,我们在往Cache中写入数据时用的是原对象的一个copy副本,而不是对应的一个引用。默认为false -->
	<!-- timeToIdleSeconds:表示一个元素所允许闲置的最大时间,也就是说一个元素在不被请求的情况下允许在缓存中待的最大时间。默认是0表示不限制,单位是秒 -->
	<!-- timeToLiveSeconds:表示无论一个元素闲置与否，其允许在Cache中存在的最大时间。默认是0，表示不限制 ,单位是秒-->
	<!-- eternal:表示是否永恒,默认为false。如果设为true,将忽略timeToIdleSeconds和timeToLiveSeconds,Cache内的元素永远都不会过期,也就不会因为元素的过期而被清除了-->
	<!-- diskExpiryThreadIntervalSeconds:表示多久检查元素是否过期的线程多久运行一次,默认是120秒-->
	<!-- clearOnFlush:表示在调用Cache的flush方法时是否要清空MemoryStore。默认为true-->
	<!-- memoryStoreEvictionPolicy:当内存里面的元素数量或大小达到指定的限制后将采用的驱除策略。默认是LRU（最近最少使用）,可选值还有LFU（最不常使用）和FIFO（先进先出）-->
	<!-- <cache name="cache1"
		maxEntriesLocalDisk="0"
		maxEntriesLocalHeap="0"
		maxEntriesInCache="0"
		maxBytesLocalDisk="10M"
		maxBytesLocalHeap="5M"
		maxBytesLocalOffHeap="5M"
		overflowToDisk="false"
		diskSpoolBufferSizeMB="30"
		overflowToOffHeap="false"
		copyOnRead="false"
		copyOnWrite="false"
		timeToIdleSeconds="0"
		timeToLiveSeconds="0"
		eternal="false"
		diskExpiryThreadIntervalSeconds="120"
		clearOnFlush="true"
		memoryStoreEvictionPolicy="LRU"> -->
		
		<!-- 使当前Cache拥有可查询的功能 -->
		<!-- name:可查询属性的名称,是必须指定的属性 -->
		<!-- <searchable keys="false" values="false">
			<searchAttribute name="" class=""/>
		</searchable> -->
		
		<!-- 表示Cache的持久化，它只有一个属性strategy，表示当前Cache对应的持久化策略。其可选值如下 -->
		<!-- localTempSwap：当堆内存或者非堆内存里面的元素已经满了的时候,将其中的元素临时的存放在磁盘上,一旦重启就会消失 -->
		<!-- localRestartable：该策略只对企业版Ehcache有用。它可以在重启的时候将堆内存或者非堆内存里面的元素持久化到硬盘上,重启之后再从硬盘上恢复元素到内存中 -->
		<!-- none：不持久化缓存的元素 -->
		<!-- distributed：该策略不适用于单机,是用于分布式的 -->
		<!-- <persistence strategy="localTempSwap"/> -->
		
		<!-- 当我们指定了copyOnRead或copyOnWrite为true时,就会用到我们的copyStrategy,即拷贝策略了。
		默认的copyStrategy是通过序列化来实现的,我们可以通过实现net.sf.ehcache.store.compound.CopyStrategy接口
		来实现自己的CopyStrategy,然后只需在cache元素下定义一个copyStrategy元素并指定其class属性为我们的CopyStrategy实现类 -->
		<!-- <copyStrategy class=""/> -->
	<!-- </cache> -->
	
	<!-- shiro认证信息缓存 -->
	<cache name="shiroAuthenticationCache"
			copyOnRead="false"
			copyOnWrite="false"
			maxBytesLocalHeap="10M"
			overflowToDisk="false"
			statistics="true"
			timeToIdleSeconds="0"
			timeToLiveSeconds="120">
		<cacheEventListenerFactory class="com.jiangnan.es.cache.ehcache.listener.factory.DefaultCacheEventListenerFactory"/>
	</cache>
	
	<!-- shiro授权信息缓存 -->
	<cache name="shiroAuthorizationCache"
			copyOnRead="false"
			copyOnWrite="false"
			maxBytesLocalHeap="10M"
			overflowToDisk="false"
			statistics="true"
			timeToIdleSeconds="0"
			timeToLiveSeconds="120">
		<cacheEventListenerFactory class="com.jiangnan.es.cache.ehcache.listener.factory.DefaultCacheEventListenerFactory"/>
	</cache>
	
	<!-- shiro session缓存 -->
	<cache name="shiro-activeSessionCache"
			copyOnRead="false"
			copyOnWrite="false"
			maxBytesLocalHeap="10M"
			overflowToDisk="false"
			statistics="true"
			timeToIdleSeconds="0"
			timeToLiveSeconds="120">
		<cacheEventListenerFactory class="com.jiangnan.es.cache.ehcache.listener.factory.DefaultCacheEventListenerFactory"/>
	</cache>
</ehcache>